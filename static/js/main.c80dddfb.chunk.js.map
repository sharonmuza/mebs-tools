{"version":3,"sources":["Theme.ts","stores/cardSortStore.ts","components/CardSort.tsx","stores/flipBoardStore.ts","components/FlipCard.tsx","components/FlipBoard.tsx","stores/triColorBoardStore.ts","components/TriColorBoard.tsx","components/PageRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalTheme","global","colors","MebsDarkBlue","MebsLightBlue","MebsDarkYellow","MebsLightYellow","MebsDarkGray","MebsLightGray","font","family","size","height","breakpoints","xsmall","value","small","medium","large","xlarge","CardLocation","CardSortStore","stateMap","Map","config","this","has","name","get","state","cards","map","s","id","text","type","location","List","categories","set","instance","StyledCard","styled","Box","Card","props","useDrag","item","card","collect","monitor","isDragging","isDropped","didDrop","opacity","drag","React","useContext","ResponsiveContext","fontSize","css","top","left","cardBackgroundColor","backgroundColor","style","ref","align","elevation","hoverIndicator","CardSection","boxes","key","direction","gap","justify","wrap","margin","DropZone","div","CategoriesDropTarget","dropTargetRef","useRef","useState","filter","x","Categories","setBoxes","useDrop","accept","isOver","canDrop","hover","delta","getClientOffset","console","log","y","drop","current","offsetLeft","offsetTop","boxList","length","box","push","moveBox","cardBoxes","fill","CategoriesSection","categoryBoxes","c","title","width","description","StyledBox","CardSort","store","getState","configuration","DndProvider","backend","Backend","FlipBoardStore","YesStyleBox","theme","NoStyleBox","CardText","h1","FlipCard","cardStyle","borderRadius","padding","alignItems","display","lineHeight","isFlipped","setIsFlipped","flip","flipped","onFlip","frontCss","frontBackgroundColor","backCss","backBackgroundColor","flipDirection","containerStyle","onClick","frontText","backText","columns","rows","Responsive","columnsVal","rowsVal","Grid","justifyContent","alignContent","children","FlipBoard","listPlanOptionBoxes","choice","cardBackgroundColorFront","cardBackgroundColorBack","TriColorBoardStore","TriColorBoard","isConcern","onChange","TriColorCardBox","TriColorCard","setIsConcern","cardColorOne","cardColorTwo","cardColorThree","newState","undefined","SectionBox","StyledLink","Link","PageRouter","useRouteMatch","path","url","cardSortSection","getCardSorts","flipBoardSection","getFlipBoards","triColorBoardSection","getTriColorBoards","flex","routes","section","configs","cardSortConfig","Instance","links","marginBottom","to","flipBoardConfig","triColorBoardConfig","StyledMainBox","App","basename","window","pathname","substr","lastIndexOf","Grommet","full","overflow","horizontal","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c80dddfb.chunk.js","sourcesContent":["\nexport const GlobalTheme = {\n    global: {\n        colors: {\n            MebsDarkBlue: '#78d0bb',\n            MebsLightBlue: '#9befdb',\n            MebsDarkYellow: '#f2dd8c',\n            MebsLightYellow: '#f6e6ab',\n            MebsDarkGray: '#737373',\n            MebsLightGray: '#cbcdca'\n        },\n        font: {\n            family: 'Helvetica',\n            size: '14px',\n            height: '20px',\n        },\n        breakpoints: {\n            xsmall: {\n                value: 650,\n            },\n            small: {\n                value: 950\n            },\n            medium: {\n                value: 1300\n            },\n            large: {\n                value: 1600\n            },\n            xlarge: {\n                value: 3000\n            }\n        }\n    },\n};\n\ntype Sizes = ('xsmall' | 'small' | 'medium' | 'large' | 'xlarge');\nexport function getGridBoxWidth(size: Sizes) {\n\n    var x = GlobalTheme.global.breakpoints[size];\n    return x;\n}","import { BaseConfig, BaseStore } from \"./BaseStore\";\n\nexport interface CardSortConfig extends BaseConfig {\n    cardBackgroundColor?: string;\n    cards: CardSortCardConfig[];\n    categories: CardSortCategoryConfig[];\n}\n\nexport interface CardSortCardConfig {\n    text: string;\n}\nexport interface CardSortCategoryConfig {\n    title: string;\n    description: string;\n}\n\n\nexport interface CardData {\n    type: string\n    id: string\n    top?: number\n    left?: number,\n    location: CardLocation\n}\n\nexport interface CardCategoryData {\n    title: string,\n    description: string\n};\n\n\nexport enum CardLocation { List, Categories };\n\nexport interface CardSortState {\n    cards: CardData[];\n    categories: CardCategoryData[];\n}\n\nexport class CardSortStore implements BaseStore<CardSortConfig, CardSortState> {\n    private static instance: CardSortStore = new CardSortStore();\n    public static get Instance() {\n        return CardSortStore.instance;\n    }\n\n    stateMap: Map<string, CardSortState> = new Map();\n\n    public getState(config: CardSortConfig) {\n        if (this.stateMap.has(config.name)) {\n            return this.stateMap.get(config.name)!;\n        }\n        else {\n\n            const cards: CardData[] = config.cards.map((s) => { return { id: s.text, type: \"card\", location: CardLocation.List } });\n            const categories: CardCategoryData[] = config.categories;\n            const state: CardSortState = { cards, categories };\n            this.stateMap.set(config.name, state);\n            return state;\n        }\n    }\n}","import React, { useState } from \"react\";\nimport { Box, ResponsiveContext } from \"grommet\";\nimport styled from \"styled-components\";\nimport { useDrag, useDrop, DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport { CardSortStore, CardData, CardLocation, CardCategoryData, CardSortConfig } from \"../stores/cardSortStore\";\n\n\nconst StyledCard = styled(Box)`\nbackground-color: lightblue;\nborder: 1px solid #000;\npadding:5px;\ncursor: move;\ndisplay: inline-block;\nborder-radius:10px;`;\n\ntype CardProps = { card: CardData, location: CardLocation, config: CardSortConfig };\nconst Card: React.FC<CardProps> = (props: CardProps): JSX.Element => {\n    const [{ opacity, isDragging, isDropped }, drag] = useDrag({\n        item: props.card,\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n            isDropped: monitor.didDrop(),\n            opacity: monitor.isDragging() ? 0.4 : 1,\n        })\n    })\n\n\n    const size = React.useContext(ResponsiveContext);\n    let fontSize = \"inherit\";\n    if (size === \"small\") {\n        fontSize = \"11px\";\n    }\n    else if (size === \"xsmall\") {\n        fontSize = \"9px\";\n    }\n\n    if (isDragging || isDropped || props.location !== props.card.location) {\n        return <div />;\n    }\n\n    let css: React.CSSProperties = { opacity, fontSize, \"top\": props.card.top, \"left\": props.card.left, \"position\": props.card.left ? \"absolute\" : \"static\" };\n    if (props.config.cardBackgroundColor) {\n        css.backgroundColor = props.config.cardBackgroundColor;\n    }\n\n    return <StyledCard style={css}\n        ref={drag}\n        align=\"center\"\n        elevation=\"small\"\n        hoverIndicator>\n        <h3>{props.card.id}</h3>\n    </StyledCard>;\n}\n\ntype CardSortInternalProps = { cards: CardData[], categories: CardCategoryData[], config: CardSortConfig };\nconst CardSection: React.FC<CardSortInternalProps> = (props) => {\n    var boxes = props.cards.map(s => {\n        return <Card key={s.id} card={s} config={props.config} location={CardLocation.List} />;\n    });\n    return <Box height=\"40%\" direction=\"row\" align=\"center\" gap=\"medium\" justify=\"center\" wrap margin={{ \"bottom\": \"70px\" }} >\n        {boxes}\n    </Box>;\n};\n\nconst DropZone = styled.div`\ndisplay:block;\nposition: relative;\nwidth: 100%;\nheight: 100%;\n`;\nconst CategoriesDropTarget: React.FC<CardSortInternalProps> = (props): JSX.Element => {\n    const dropTargetRef = React.useRef<HTMLDivElement>(null);\n    const [boxes, setBoxes] = useState<CardData[]>(props.cards.filter(x => x.location === CardLocation.Categories));\n    const moveBox = (item: CardData) => {\n\n        let boxList = boxes.filter(x => x.id === item.id);\n        if (boxList != null && boxList.length > 0) {\n            const box = boxList[0];\n            box.left = item.left;\n            box.top = item.top;\n        } else {\n            boxes.push(item);\n        }\n        setBoxes(boxes);\n    }\n\n\n    const [{ canDrop, isOver }, drop] = useDrop({\n        accept: \"card\",\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop()\n        }),\n        hover(item: CardData, monitor) {\n            const delta = monitor.getClientOffset();\n            if (delta) {\n                console.log(`x:${delta.x}, y:${delta.y})`);\n            }\n        },\n        drop(item: CardData, monitor) {\n            item.location = CardLocation.Categories;\n            const delta = monitor.getClientOffset();\n            if (delta !== null && dropTargetRef.current) {\n                item.left = delta.x - dropTargetRef.current.offsetLeft;\n                item.top = delta.y - dropTargetRef.current.offsetTop;\n\n                moveBox(item);\n            }\n            return undefined\n        },\n    });\n    const isActive = canDrop && isOver\n    let backgroundColor = 'transparent';\n    if (isActive) {\n        backgroundColor = '#ccc';\n    } else if (canDrop) {\n        backgroundColor = '#ddd';\n    }\n\n    var cardBoxes = boxes.map(x => {\n        return <Card key={x.id} card={x} location={CardLocation.Categories} config={props.config} />\n    });\n\n    return (\n        <Box style={{ backgroundColor }} fill ref={dropTargetRef}>\n            <DropZone ref={drop}>\n                <CategoriesSection {...props} />\n                {cardBoxes}\n            </DropZone>\n        </Box >\n    )\n}\n\nconst CategoriesSection: React.FC<CardSortInternalProps> = (props) => {\n    var categoryBoxes = props.categories.map(c => <Box key={c.title} width=\"33%\">\n        <h1>{c.title}</h1>\n        <span>{c.description}</span>\n    </Box>);\n    return <Box height=\"auto\" direction=\"row\" align=\"stretch\" gap=\"large\">\n        {categoryBoxes}\n    </Box>;\n};\n\nconst StyledBox = styled(Box)`\n  padding-left:15px;\n  padding-right:15px;\n`;\n\nexport type CardSortProps = {\n    configuration: CardSortConfig\n    store: CardSortStore\n}\n\nexport const CardSort: React.FC<CardSortProps> = (props: CardSortProps) => {\n\n    const state = props.store.getState(props.configuration);\n    return <DndProvider backend={Backend}>\n        <StyledBox direction=\"column\" align=\"center\" fill>\n            <h1>{props.configuration.title}</h1>\n            <CardSection cards={state.cards} categories={state.categories} config={props.configuration} />\n            <CategoriesDropTarget cards={state.cards} categories={state.categories} config={props.configuration} />\n        </StyledBox>\n    </DndProvider>;\n};\n\n","import { BaseConfig, BaseStore } from \"./BaseStore\";\n\nexport interface FlipBoardConfig extends BaseConfig {\n    cardBackgroundColorFront?: string;\n    cardBackgroundColorBack?: string;\n    cards: FlipBoardCardConfig[];\n}\n\nexport interface FlipBoardCardConfig {\n    frontText: string;\n    backText: string;\n}\n\ninterface FlipBoardCardData extends FlipBoardCardConfig {\n    isFlipped?: boolean;\n};\n\nexport interface FlipBoardState {\n    cards: FlipBoardCardData[];\n}\n\nexport class FlipBoardStore implements BaseStore<FlipBoardConfig, FlipBoardState> {\n\n    private static instance: FlipBoardStore = new FlipBoardStore();\n    public static get Instance() {\n        return FlipBoardStore.instance;\n    }\n\n    stateMap: Map<string, FlipBoardState> = new Map();\n\n    public getState(config: FlipBoardConfig) {\n        if (this.stateMap.has(config.name)) {\n            return this.stateMap.get(config.name)!;\n        }\n        else {\n\n            const cards: FlipBoardCardData[] = config.cards.map((s) => { return { ...s } });\n            const state: FlipBoardState = { cards };\n            this.stateMap.set(config.name, state);\n            return state;\n        }\n    }\n}","import React, { useState } from 'react';\nimport ReactCardFlip, { ReactFlipCardProps } from 'react-card-flip';\nimport styled from 'styled-components';\n\nexport type FlipCardProps = Partial<ReactFlipCardProps> & {\n    frontText: string,\n    backText: string,\n    frontBackgroundColor?: string,\n    backBackgroundColor?: string,\n    onFlip?: (flipped: boolean) => void\n}\n\nconst YesStyleBox = styled.div`\nbackground-color: ${props => props.theme.global.colors.MebsDarkBlue};\nborder: 1px solid #000;\nborder-radius:40px;\ntext-align: center;\ncolor: black;`;\n\nconst NoStyleBox = styled.div`\nbackground-color: ${props => props.theme.global.colors.MebsDarkGray};\nborder: 1px solid #000;\nborder-radius:40px;\ntext-align: center;\ncolor: white;`;\n\n\nconst CardText = styled.h1`\nwidth:100%;`;\n\nexport function FlipCard(props: FlipCardProps) {\n    const cardStyle = {\n        borderRadius: '3px',\n        padding: '15px',\n        width: '250px',\n        height: '150px',\n        alignItems: \"center\",\n        display: \"flex\",\n        lineHeight: \"normal\"\n    };\n\n    const [isFlipped, setIsFlipped] = useState(props.isFlipped);\n\n    const flip = (flipped: boolean) => {\n        setIsFlipped(flipped);\n        if (props.onFlip) {\n            props.onFlip(flipped);\n        }\n    }\n\n    let frontCss: React.CSSProperties = { ...cardStyle };\n    if (props.frontBackgroundColor) {\n        frontCss.backgroundColor = props.frontBackgroundColor;\n    }\n\n    let backCss: React.CSSProperties = { ...cardStyle };\n    if (props.backBackgroundColor) {\n        backCss.backgroundColor = props.backBackgroundColor;\n    }\n\n    return <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\" containerStyle={{ width: \"250px\", height: \"150px\" }}>\n        <YesStyleBox style={frontCss} onClick={() => flip(!isFlipped)}>\n            <CardText>\n                {props.frontText}\n            </CardText>\n        </YesStyleBox>\n        <NoStyleBox style={backCss} onClick={() => flip(!isFlipped)}>\n            <CardText>\n                {props.backText}\n            </CardText>\n        </NoStyleBox>\n    </ReactCardFlip>;\n}\n","import React from \"react\";\nimport { Box, Grid, ResponsiveContext, GridProps } from \"grommet\";\nimport { FlipCard } from \"./FlipCard\";\nimport { FlipBoardStore, FlipBoardConfig } from \"../stores/flipBoardStore\";\n\n\ninterface IDictionary<TValue> {\n    [id: string]: TValue;\n}\n// If the size is small, we only see 1 column\n// If the size is medium, we only see 2 columns\n// If the size is either large or xlarge, we see 3 columns\nconst columns: IDictionary<string[]> = {\n    xsmall: [\"auto\"],\n    small: [\"auto\", \"auto\"],\n    medium: [\"auto\", \"auto\", \"auto\"],\n    large: [\"auto\", \"auto\", \"auto\", \"auto\"],\n    xlarge: [\"auto\", \"auto\", \"auto\", \"auto\"]\n};\n\n// If the size is small, we have 3 rows\n// If the size is medium, we have 2 rows\n// If the size is large or xlarge, we have 1 row\nconst rows: IDictionary<string[]> = {\n    small: [\"xsmall\", \"xsmall\", \"xsmall\"],\n    medium: [\"xsmall\", \"xsmall\"],\n    large: [\"xsmall\"],\n    xlarge: [\"xsmall\"]\n};\n\ntype ResponsiveGridProps = { size: string, children: any } & GridProps;\nconst Responsive = (props: ResponsiveGridProps) => {\n    const size = props.size;\n    // Take into consideration if not array is sent but a simple string\n    let columnsVal: (string[] | null) = null;\n    if (columns) {\n        if (columns[size]) {\n            columnsVal = columns[size];\n        }\n    }\n\n    let rowsVal: (string[] | null) = null;\n    if (rows) {\n        if (rows[size]) {\n            rowsVal = rows[size];\n        }\n    }\n\n    return (\n        <Grid\n            justifyContent=\"center\"\n            alignContent=\"stretch\"\n            align=\"center\"\n            justify=\"center\"\n            margin=\"0\"\n            rows={!rowsVal ? size : rowsVal}\n            columns={!columnsVal ? size : columnsVal}\n            {...props}>\n            {props.children}\n        </Grid>\n    );\n}\n\n\n\nexport type FlipBoardProps = {\n    configuration: FlipBoardConfig\n    store: FlipBoardStore\n}\n\nexport const FlipBoard: React.FC<FlipBoardProps> = (props: FlipBoardProps) => {\n\n    const size = React.useContext(ResponsiveContext);\n    const state = props.store.getState(props.configuration);\n    // Create box for each  choice\n    const listPlanOptionBoxes = state.cards.map(choice => {\n        const onFlip = (flipped: boolean) => {\n            choice.isFlipped = flipped;\n        }\n        return <FlipCard key={choice.frontText}\n            isFlipped={choice.isFlipped}\n            frontText={choice.frontText}\n            backText={choice.backText}\n            frontBackgroundColor={props.configuration.cardBackgroundColorFront}\n            backBackgroundColor={props.configuration.cardBackgroundColorBack}\n            onFlip={onFlip} />\n    });\n\n    return <Box>\n        <Responsive size={size} fill={true} gap=\"large\" margin=\"medium\" rows=\"200px\" >\n            {listPlanOptionBoxes}\n        </Responsive>\n    </Box>\n};","import { BaseConfig, BaseStore } from \"./BaseStore\";\n\nexport interface TriColorBoardConfig extends BaseConfig {\n    cardColorOne?: string;\n    cardColorTwo?: string;\n    cardColorThree?: string;\n    cards: TriColorBoardCardConfig[];\n}\n\nexport interface TriColorBoardCardConfig {\n    text: string;\n}\n\ninterface TriColorBoardCardData extends TriColorBoardCardConfig {\n    state?: boolean;\n};\n\nexport interface TriColorBoardState {\n    cards: TriColorBoardCardData[];\n}\n\nexport class TriColorBoardStore implements BaseStore<TriColorBoardConfig, TriColorBoardState> {\n\n    private static instance: TriColorBoardStore = new TriColorBoardStore();\n    public static get Instance() {\n        return TriColorBoardStore.instance;\n    }\n\n    stateMap: Map<string, TriColorBoardState> = new Map();\n\n    public getState(config: TriColorBoardConfig) {\n        if (this.stateMap.has(config.name)) {\n            return this.stateMap.get(config.name)!;\n        }\n        else {\n            const cards: TriColorBoardCardData[] = config.cards.map((s) => { return { ...s } });\n            const state: TriColorBoardState = { cards };\n            this.stateMap.set(config.name, state);\n            return state;\n        }\n    }\n}","import React, { useState } from \"react\";\nimport { Box, Grid, ResponsiveContext, GridProps } from \"grommet\";\nimport styled from \"styled-components\";\nimport { TriColorBoardConfig, TriColorBoardStore } from \"../stores/triColorBoardStore\";\n\ninterface IDictionary<TValue> {\n    [id: string]: TValue;\n}\n// If the size is small, we only see 1 column\n// If the size is medium, we only see 2 columns\n// If the size is either large or xlarge, we see 3 columns\nconst columns: IDictionary<string[]> = {\n    xsmall: [\"auto\"],\n    small: [\"auto\", \"auto\"],\n    medium: [\"auto\", \"auto\", \"auto\"],\n    large: [\"auto\", \"auto\", \"auto\", \"auto\", \"auto\", \"auto\"],\n    xlarge: [\"auto\", \"auto\", \"auto\", \"auto\", \"auto\", \"auto\"]\n};\n\n// If the size is small, we have 3 rows\n// If the size is medium, we have 2 rows\n// If the size is large or xlarge, we have 1 row\nconst rows: IDictionary<string[]> = {\n    small: [\"xsmall\", \"xsmall\", \"xsmall\"],\n    medium: [\"xsmall\", \"xsmall\"],\n    large: [\"xsmall\"],\n    xlarge: [\"xsmall\"]\n};\n\ntype ResponsiveGridProps = { size: string, children: any } & GridProps;\nconst Responsive = (props: ResponsiveGridProps) => {\n    const size = props.size;\n    // Take into consideration if not array is sent but a simple string\n    let columnsVal: (string[] | null) = null;\n    if (columns) {\n        if (columns[size]) {\n            columnsVal = columns[size];\n        }\n    }\n\n    let rowsVal: (string[] | null) = null;\n    if (rows) {\n        if (rows[size]) {\n            rowsVal = rows[size];\n        }\n    }\n\n    return (\n        <Grid\n            justifyContent=\"center\"\n            alignContent=\"stretch\"\n            align=\"center\"\n            justify=\"center\"\n            style={{ backgroundColor: '#000', padding: '1px' }}\n            rows={!rowsVal ? size : rowsVal}\n            columns={!columnsVal ? size : columnsVal}\n            {...props}>\n            {props.children}\n        </Grid>\n    );\n}\n\nexport type TriColorBoardProps = {\n    configuration: TriColorBoardConfig\n    store: TriColorBoardStore\n}\n\nexport const TriColorBoard: React.FC<TriColorBoardProps> = (props: TriColorBoardProps) => {\n\n    const state = props.store.getState(props.configuration);\n    const size = React.useContext(ResponsiveContext);\n    // Create box for each  choice\n    const listPlanOptionBoxes = state.cards.map(card => {\n        const onChange = (isConcern: boolean) => {\n            card.state = isConcern;\n        }\n        return <TriColorCard key={card.text} text={card.text} isConcern={card.state} config={props.configuration} onChange={onChange} />\n    });\n\n    return <Box>\n        <Responsive size={size} fill={true} gap=\"0px\" margin=\"0px\" rows=\"auto\">\n            {listPlanOptionBoxes}\n        </Responsive>\n    </Box>\n};\n\nexport type TriColorCardProps = {\n    text: string,\n    isConcern?: boolean,\n    config: TriColorBoardConfig,\n    onChange?: (state: boolean) => void\n}\n\ninterface BoxProps {\n    backgroundColor: string;\n}\nconst TriColorCardBox = styled.div<BoxProps>`\nbackground-color: ${props => props.backgroundColor || \"white\"};\nborder: 0.5px solid #000;\nborder-radius:0;\ntext-align: center;\npadding: 15px;\nwidth: 200px;\nheight: 70px;\nalign-items: center;\ndisplay: flex;\nline-height: normal;\nfont-size: 1.1rem;\njustify-content: center;    \n-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;\ncolor: black;`;\n\n\nconst TriColorCard = (props: TriColorCardProps) => {\n\n    const [isConcern, setIsConcern] = useState(props.isConcern);\n\n    const onClick = () => {\n        let newState = false;\n        if (isConcern === null || isConcern === undefined) {\n            newState = false;\n        }\n        else if (isConcern === false) {\n            newState = true;\n        }\n        else {\n            newState = false;\n        }\n\n        setIsConcern(newState);\n        if (props.onChange) {\n            props.onChange(newState);\n        }\n    }\n\n    let backgroundColor = props.config.cardColorOne!;\n    if (isConcern === true) {\n        backgroundColor = props.config.cardColorTwo!;\n    }\n    else if (isConcern === false) {\n        backgroundColor = props.config.cardColorThree!;\n    }\n\n    return <TriColorCardBox key={props.text} backgroundColor={backgroundColor} onClick={onClick} >\n        <span>{props.text}</span>\n    </TriColorCardBox>;\n}","import React from \"react\";\nimport { CardSort } from \"./CardSort\";\nimport { Switch, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { Box } from \"grommet\";\nimport styled from \"styled-components\";\nimport { CardSortStore, CardSortConfig } from \"../stores/cardSortStore\";\nimport { FlipBoardStore, FlipBoardConfig } from \"../stores/flipBoardStore\";\nimport { FlipBoard } from \"./FlipBoard\";\n\n// Config files\nimport cardSortConfig from \"../configurations/cardSortConfig.json\";\nimport flipBoardConfig from \"../configurations/flipBoardConfig.json\";\nimport triColorBoardConfig from \"../configurations/triColorBoardConfig.json\";\nimport { TriColorBoardStore, TriColorBoardConfig } from \"../stores/triColorBoardStore\";\nimport { TriColorBoard } from \"./TriColorBoard\";\n\nconst StyledBox = styled(Box)`\n`;\n\nconst SectionBox = styled(Box)`\n    width:500px;\n`;\n\nconst StyledLink = styled(Link)`\n  font-weight: bold;\n  text-decoration: none;\n  font-size: 17px;\n  color: ${props => props.theme.global.colors['neutral-3']};\n  &:active, &:visited {\n    color: ${props => props.theme.global.colors['neutral-3']};\n    border: none;\n  }\n  &:hover {\n    color: ${props => props.theme.global.colors['neutral-4']};\n  }\n`;\n\nexport const PageRouter = () => {\n\n    let { path, url } = useRouteMatch();\n\n    const cardSortSection = getCardSorts(path, url);\n    const flipBoardSection = getFlipBoards(path, url);\n    const triColorBoardSection = getTriColorBoards(path, url); \n\n    return (\n        <StyledBox fill={true} flex align='center'  >\n            <Switch>\n                {flipBoardSection.routes}\n                {cardSortSection.routes}\n                {triColorBoardSection.routes}\n                <Route path=\"/\">\n                    <h1>Directory of Tools</h1>\n                    {flipBoardSection.section}\n                    {cardSortSection.section}\n                    {triColorBoardSection.section}\n                </Route>\n            </Switch></StyledBox>);\n}\n\n\nexport interface PageSections {\n    section?: JSX.Element;\n    routes?: JSX.Element[];\n}\n\nconst getCardSorts = (path: string, url: string) => {\n    const configs: CardSortConfig[] = cardSortConfig;\n    if (!configs || configs.length <= 0) {\n        return {};\n    }\n    const routes = configs.map(x => <Route key={x.name} path={`${path}${x.name}`}>\n        <CardSort configuration={x} store={CardSortStore.Instance} />\n    </Route>);\n\n    const links = configs.map(x => <li style={{ marginBottom: '8px' }} key={x.name}><StyledLink key={x.name} to={`${url}${x.name}`}>\n        {x.title}\n    </StyledLink></li>);\n\n    const section = <SectionBox><h2>Card Sorts</h2>\n        <ul>\n            {links}\n        </ul>\n    </SectionBox>;\n\n    return { routes, section };\n}\n\n\nconst getFlipBoards = (path: string, url: string) => {\n    const configs: FlipBoardConfig[] = flipBoardConfig;\n    if (!configs || configs.length <= 0) {\n        return {};\n    }\n    const routes = configs.map(x => <Route key={x.name} path={`${path}${x.name}`}>\n        <FlipBoard configuration={x} store={FlipBoardStore.Instance} />\n    </Route>);\n\n    const links = configs.map(x => <li style={{ marginBottom: '8px' }} key={x.name}><StyledLink key={x.name} to={`${url}${x.name}`}>\n        {x.title}\n    </StyledLink></li>);\n\n    const section = <SectionBox><h2>Flip Boards</h2>\n        <ul>\n            {links}\n        </ul>\n    </SectionBox>;\n\n    return { routes, section };\n}\n\n\nconst getTriColorBoards = (path: string, url: string) => {\n    const configs: TriColorBoardConfig[] = triColorBoardConfig;\n    if (!configs || configs.length <= 0) {\n        return {};\n    }\n    const routes = configs.map(x => <Route key={x.name} path={`${path}${x.name}`}>\n        <TriColorBoard configuration={x} store={TriColorBoardStore.Instance} />\n    </Route>);\n\n    const links = configs.map(x => <li style={{ marginBottom: '8px' }} key={x.name}><StyledLink key={x.name} to={`${url}${x.name}`}>\n        {x.title}\n    </StyledLink></li>);\n\n    const section = <SectionBox><h2>Color Boards</h2>\n        <ul>\n            {links}\n        </ul>\n    </SectionBox>;\n\n    return { routes, section };\n}","import React from 'react';\nimport {\n  Box,\n  Grommet\n} from 'grommet';\nimport styled from \"styled-components\";\nimport { GlobalTheme } from './Theme';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport { PageRouter } from './components/PageRouter';\n\nconst StyledMainBox = styled(Box)`\n  margin-bottom: 10px;\n  margin-top: 0;\n  margin-left:0;\n  margin-right:0;\n  padding-top: 10px;\n`;\n\nconst getBasename = (path: string) => path.substr(0, path.lastIndexOf('/'));\n\nconst App = () => {\n\n  return (\n    <Router basename={getBasename(window.location.pathname)}>\n      <Grommet theme={GlobalTheme} full>\n        <Box fill>\n          <StyledMainBox direction='row' flex overflow={{ horizontal: 'hidden' }}>\n            <Box flex align='center' justify='center'>\n              <PageRouter />\n            </Box>\n          </StyledMainBox>\n        </Box>\n      </Grommet>\n    </Router>\n  );\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}